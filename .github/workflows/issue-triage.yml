name: Issue Triage

on:
  issues:
    types: [labeled]

jobs:
  issue-creation:
    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        tag-mappings: [{
          bug: issue-transfer,
          trill: tronic
        }]
    steps:
      - name: Verify Tag
        id: verify-tag
        uses: actions/github-script@v5
        with:
          script: |
            const label = context.payload.label.name;
            const mappings = ${{ toJson(matrix.tag-mappings) }};
            for (const [key, value] of Object.entries(mappings)) {
              if (label == key) {
                return value;
              }
            }
            return '';
          result-encoding: string
      - name: Check if Triage Label Needs to be Created
        uses: actions/github-script@v5
        if: steps.verify-tag.outputs.result != '' && github.event.issue.state == 'open'
        with:
          github-token: ${{ secrets.TRANSFER_ISSUE_TOKEN }}
          script: |
            const labels = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: `${{ steps.verify-tag.outputs.result }}`,
            });
            if (labels.data.filter(e => e.name === 'Needs Triage').length <= 0) {
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: `${{ steps.verify-tag.outputs.result }}`,
                name: 'Needs Triage',
                color: 'FF0000',
              });
            }
      - name: Transfer Issue
        id: transfer-issue
        uses: actions/github-script@v5
        if: steps.verify-tag.outputs.result != '' && github.event.issue.state == 'open'
        with:
          github-token: ${{ secrets.TRANSFER_ISSUE_TOKEN }}
          script: |
            const labels = [];
            const issueLabels = context.payload.issue.labels;
            for (const label of issueLabels) {
              labels.push(label.name)
            }
            let newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: `${{ steps.verify-tag.outputs.result }}`,
              title: context.payload.issue.title,
              body: context.payload.issue.body,
              labels: ['Needs Triage']
            });
            return newIssue;
      - name: Transfer Issue Comments
        id: transfer-issue-comments
        uses: actions/github-script@v5
        if: steps.verify-tag.outputs.result != '' && github.event.issue.state == 'open'
        with:
          github-token: ${{ secrets.TRANSFER_ISSUE_TOKEN }}
          script: |
            const newIssue = ${{ steps.transfer-issue.outputs.result }};
            const listComments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            if (listComments.data.length) {
              for (const [key, comment] of Object.entries(listComments.data)) {
                let body = `> Original [comment](comment.html_url) by ${comment.user.login}`
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: `${{ steps.verify-tag.outputs.result }}`,
                  issue_number: newIssue.data.number,
                  body: body + "\n\n" + comment.body,
                });
              }
            }
      - name: Close and Comment on Current Issue
        uses: actions/github-script@v5
        if: steps.verify-tag.outputs.result != '' && github.event.issue.state == 'open'
        with:
          github-token: ${{ secrets.TRANSFER_ISSUE_TOKEN }}
          script: |
            const newIssue = ${{ steps.transfer-issue.outputs.result }};
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${context.payload.issue.user.login} issue has been moved to [${newIssue.data.html_url}](${newIssue.data.html_url})`
            });
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });